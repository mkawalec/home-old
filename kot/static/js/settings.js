// Generated by CoffeeScript 1.3.3
var bind_events, bootstrap, mark_selected, rollback_colour_change, save_colour, send_file, setup_structure, update_progress;

setup_structure = function() {
  var avatar, avatar_body, avatar_header, colour, colour_body, colour_picker, colour_picker_body, colour_picker_header, file_input, holder, send_button, _i, _len;
  holder = document.getElementById('settings_holder');
  colour_picker = document.createElement('div');
  $(colour_picker).attr('class', 'span4 colour_picker');
  colour_picker_header = document.createElement('div');
  $(colour_picker_header).attr('id', 'colour_picker_header');
  $(colour_picker_header).attr('class', 'header');
  $(colour_picker_header).text('Select colour:');
  colour_picker_body = document.createElement('div');
  $(colour_picker_body).attr('id', 'colour_picker_body');
  $(colour_picker_body).attr('class', 'body');
  for (_i = 0, _len = colours.length; _i < _len; _i++) {
    colour = colours[_i];
    colour_body = document.createElement('div');
    $(colour_body).attr('class', 'colour_body');
    $(colour_body).attr('style', "border-color:" + colour.border + ";background-color:" + colour.colour + ";");
    $(colour_body).attr('data-id', colour.id);
    colour_picker_body.appendChild(colour_body);
  }
  colour_picker.appendChild(colour_picker_header);
  colour_picker.appendChild(colour_picker_body);
  holder.appendChild(colour_picker);
  avatar = document.createElement('div');
  $(avatar).attr('class', 'span4 avatar_selector');
  avatar_header = document.createElement('div');
  $(avatar_header).attr('class', 'header');
  $(avatar_header).text('Your avatar:');
  avatar_body = document.createElement('div');
  $(avatar_body).attr('class', 'body');
  file_input = document.createElement('input');
  $(file_input).attr('type', 'file');
  $(file_input).attr('id', 'file_input');
  send_button = document.createElement('button');
  $(send_button).attr('class', 'btn btn-primary');
  $(send_button).attr('id', 'send_avatar');
  $(send_button).text('Send');
  avatar_body.appendChild(file_input);
  avatar_body.appendChild(send_button);
  avatar.appendChild(avatar_header);
  avatar.appendChild(avatar_body);
  holder.appendChild(avatar);
  mark_selected();
  return bind_events();
};

mark_selected = function() {
  var currently_selected, holder, offset_left, offset_top, opposite, selection_marker;
  selection_marker = document.createElement('div');
  $(selection_marker).attr('class', 'selection_marker');
  holder = document.getElementById('colour_picker_body');
  currently_selected = $(".colour_body[data-id=" + current_colour + "]")[0];
  offset_left = currently_selected.offsetLeft;
  offset_top = currently_selected.offsetTop;
  offset_left -= 5;
  offset_top -= 5;
  opposite = return_opposite($(currently_selected).css('background-color'));
  $(selection_marker).attr('style', ("left:" + offset_left + "px;top:" + offset_top + "px;") + ("background-color:" + opposite));
  return holder.appendChild(selection_marker);
};

bind_events = function() {
  $('#send_avatar').bind('click', function(event) {
    console.log('sending');
    return send_file();
  });
  return $('.colour_body').each(function(iter, obj) {
    return $(obj).bind('click', function(event) {
      var color, offset_left, offset_top;
      offset_left = this.offsetLeft;
      offset_top = this.offsetTop;
      color = return_opposite($(this).css('background-color'));
      offset_left -= 5;
      offset_top -= 5;
      $('.selection_marker').stop().animate({
        top: offset_top,
        left: offset_left,
        'background-color': color
      }, 250);
      return save_colour(this);
    });
  });
};

send_file = function() {
  return console.log($('#file_input')[0].value);
};

save_colour = function(what) {
  var colour_id;
  colour_id = $(what).attr('data-id');
  return $.ajax({
    url: script_root + '/_colour_save',
    type: 'POST',
    dataType: 'json',
    data: {
      colour: colour_id
    },
    success: function(data) {
      var current_colour;
      if (data.result !== 1) {
        status_notify(what, 'error');
        return rollback_colour_change();
      } else {
        status_notify(what, 'success');
        return current_colour = colour_id;
      }
    },
    error: function() {
      status_notify(what, 'error');
      return rollback_colour_change();
    }
  });
};

update_progress = function(event) {
  var percent;
  if (event.lengthComputable) {
    percent = event.loaded / event.total;
    return console.log(percent + '%');
  } else {
    return console.log('error computing length');
  }
};

rollback_colour_change = function() {
  var color, colour, offset_left, offset_top;
  colour = $(".colour_body[data-id='" + current_colour + "']")[0];
  offset_left = colour.offsetLeft;
  offset_top = colour.offsetTop;
  color = return_opposite($(colour).css('background-color'));
  offset_left -= 5;
  offset_top -= 5;
  return $('.selection_marker').stop().animate({
    top: offset_top,
    left: offset_left,
    'background-color': color
  }, 250);
};

bootstrap = function() {
  return setup_structure();
};

$(document).ready(function() {
  return bootstrap();
});
