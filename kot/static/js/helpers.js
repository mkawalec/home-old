// Generated by CoffeeScript 1.3.3
var decimal_to_hex, get_nice_size, get_offsets, hex, hexDigits, hex_to_decimal, max, min, return_opposite, rgb2hex, rgb2hsv, status_notify;

get_offsets = function(element) {
  var offset;
  offset = [element.offsetLeft, element.offsetTop];
  while (element = element.offsetParent) {
    offset[0] += element.offsetLeft;
    offset[1] += element.offsetTop;
  }
  return offset;
};

status_notify = function(object, what) {
  var bg_color, border_color;
  bg_color = $(object).css('background-color');
  border_color = "";
  if (($(object).css('border-color')).length > 0) {
    border_color = $(object).css('border-color');
  } else {
    border_color = ((($(object).attr('style')).match(/border-color:(#[0-9A-F]{6})|(rgb\((\d+),\s*(\d+),\s*(\d+)\))/))[0].match(/#([0-9A-F]{6})|(rgb\((\d+),\s*(\d+),\s*(\d+)\))/))[0];
    console.log(border_color);
  }
  switch (what) {
    case "success":
      return ($(object).stop().animate({
        'background-color': '#99EE99',
        'border-color': '#EAFF00'
      }, 500)).animate({
        'background-color': bg_color,
        'border-color': border_color
      }, 500);
    case "error":
      ($(object).stop().animate({
        'background-color': '#EE9999',
        'border-color': '#EE0000'
      }, 500)).animate({
        'background-color': bg_color,
        'border-color': border_color
      }, 500);
      return console.log('error, error');
  }
};

decimal_to_hex = function(decimal) {
  var hex;
  hex = decimal.toString(16);
  if (hex.length === 1) {
    hex = '0' + hex;
  }
  return hex;
};

hex_to_decimal = function(hex) {
  return parseInt(hex, 16);
};

return_opposite = function(colour) {
  colour = rgb2hex(colour);
  return '#' + (decimal_to_hex(255 - hex_to_decimal(colour.substr(0, 2)))).toString() + (decimal_to_hex(255 - hex_to_decimal(colour.substr(2, 2)))).toString() + (decimal_to_hex(255 - hex_to_decimal(colour.substr(4, 2)))).toString();
};

rgb2hex = function(rgb) {
  rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
  return (hex(rgb[1])) + (hex(rgb[2])) + (hex(rgb[3]));
};

hex = function(x) {
  if (isNaN(x)) {
    return "00";
  } else {
    return hexDigits[(x - x % 16) / 16] + hexDigits[x % 16];
  }
};

hexDigits = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f");

min = function(first, second) {
  if (first < second) {
    return first;
  }
  return second;
};

max = function(first, second) {
  if (first > second) {
    return first;
  }
  return second;
};

rgb2hsv = function(hex) {
  var blue, f, green, hue, i, red, sat, val, x;
  red = hex_to_decimal(hex.substr(1, 2));
  green = hex_to_decimal(hex.substr(3, 2));
  blue = hex_to_decimal(hex.substr(5, 2));
  hue = 0;
  sat = 0;
  f = 0;
  i = 0;
  x = min(min(red, green), blue);
  val = max(max(red, green), blue);
  if (x !== val) {
    if (red === x) {
      f = green - blue;
      i = 3;
    } else {
      if (green === x) {
        f = blue - red;
        i = 5;
      } else {
        f = red - green;
        i = 1;
      }
    }
    hue = ((i - f / (val - x)) * 60) % 360;
    sat = (val - x) / val;
  }
  return [hue, sat, val];
};

Date.prototype.format_nicely = function() {
  var day, hours, minutes, month, year;
  year = this.getFullYear();
  month = parseInt(this.getMonth()) + 1;
  day = this.getDate();
  hours = this.getHours();
  minutes = this.getMinutes();
  if (month < 10) {
    month = '0' + month;
  }
  if (day < 10) {
    day = '0' + day;
  }
  if (hours < 10) {
    hours = '0' + hours;
  }
  if (minutes < 10) {
    minutes = '0' + minutes;
  }
  return "" + year + "/" + month + "/" + day + " " + hours + ":" + minutes;
};

get_nice_size = function(file_size) {
  var app, _i, _len, _ref;
  console.log(file_size);
  _ref = ['B', 'KB', 'MB', 'GB', 'TB'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    app = _ref[_i];
    if (file_size < 1024) {
      return file_size + app;
    }
    file_size = Math.round(file_size / 1024);
  }
  return -1;
};
