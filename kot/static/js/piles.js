// Generated by CoffeeScript 1.3.3
/*
Copyright Michal Kawalec, 2012
*/

var bind_search_area, bootstrap, create_delete, drag_stopped, dragging, globals, json_sync_piles, name, over_selector, remove_delete, remove_object, set_searched_users, setup_pile_members, setup_search, setup_structure, test;

this.pile_height = 250;

window.lastpress = 0;

setup_pile_members = function() {
  var holder_left, holder_top, left, member, pile, pile_div, pile_left, pile_member, pile_members, pile_top, top, _i, _j, _len, _len1, _ref, _ref1, _ref2;
  for (_i = 0, _len = piles.length; _i < _len; _i++) {
    pile = piles[_i];
    pile_div = $("[data-id=" + pile.id + "]")[0];
    pile_members = document.getElementById('container');
    _ref = get_offsets(pile_div), pile_left = _ref[0], pile_top = _ref[1];
    _ref1 = get_offsets(document.getElementById('pile_holder')), holder_left = _ref1[0], holder_top = _ref1[1];
    _ref2 = pile.members;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      member = _ref2[_j];
      pile_member = document.createElement('div');
      $(pile_member).attr('class', 'pile_member');
      left = parseInt(pile_left) + parseInt(this.pile_width * member.x);
      top = parseInt(pile_top) + parseInt(this.pile_height * member.y);
      $(pile_member).attr('style', 'left:' + left + 'px;top:' + top + 'px;');
      $(pile_member).text(member.member);
      $(pile_member).attr('data-id', member.member);
      pile_members.appendChild(pile_member);
    }
  }
  return $('.pile_member').draggable({
    start: function() {
      return create_delete();
    },
    drag: function() {
      return dragging(this);
    },
    stop: function(e, ui) {
      remove_delete();
      return drag_stopped(e, ui, this);
    },
    containment: "parent"
  });
};

create_delete = function() {
  return $('.pile').each(function(iter, obj) {
    var delete_area, height, holder_height;
    if (obj.children.length === 2) {
      delete_area = document.createElement('div');
      $(delete_area).attr('class', 'delete_area');
      $(delete_area).text('Delete');
      obj.appendChild(delete_area);
    }
    height = obj.offsetHeight;
    holder_height = (document.getElementById('pile_holder')).offsetHeight;
    $(obj.children[1]).stop().animate({
      top: '100px'
    });
    return $(obj).stop().animate({
      height: (height + 98) + 'px'
    }, function() {
      return $(obj.children[2]).stop().animate({
        opacity: 1
      });
    });
  });
};

remove_delete = function() {
  return $('.pile').each(function(iter, obj) {
    var height, holder_height;
    height = obj.offsetHeight;
    holder_height = (document.getElementById('pile_holder')).offsetHeight;
    return $(obj.children[2]).stop().animate({
      opacity: 0
    }, function() {
      $(obj.children[1]).stop().animate({
        top: '0'
      });
      return $(obj).stop().animate({
        height: (height - 102) + 'px'
      });
    });
  });
};

setup_structure = function() {
  var holder, holder_left, holder_top, holder_width, pile, pile_div, pile_holder, pile_members, pile_title, _i, _len, _ref;
  holder = $('.container');
  pile_holder = document.createElement('div');
  $(pile_holder).attr('id', 'pile_holder');
  holder.append(pile_holder);
  holder_width = pile_holder.offsetWidth;
  _ref = get_offsets(pile_holder), holder_left = _ref[0], holder_top = _ref[1];
  for (_i = 0, _len = piles.length; _i < _len; _i++) {
    pile = piles[_i];
    this.pile_width = holder_width / piles.length - 10 * piles.length;
    pile_div = document.createElement('div');
    $(pile_div).attr('class', 'pile');
    $(pile_div).attr('data-id', pile.id);
    $(pile_div).attr('style', 'width:' + this.pile_width + 'px;');
    pile_title = document.createElement('div');
    $(pile_title).attr('class', 'pile_title');
    $(pile_title).text(pile.name);
    pile_members = document.createElement('div');
    $(pile_members).attr('class', 'pile_members');
    pile_div.appendChild(pile_members);
    pile_div.appendChild(pile_title);
    pile_holder.appendChild(pile_div);
  }
  return setup_pile_members();
};

setup_search = function() {
  var search_area, search_bar, search_field, search_results;
  search_area = document.createElement('div');
  $(search_area).attr('id', 'search_area');
  search_bar = document.createElement('div');
  $(search_bar).attr('id', 'search_bar');
  search_field = document.createElement('input');
  $(search_field).attr('id', 'search_field');
  search_bar.appendChild(search_field);
  search_results = document.createElement('div');
  $(search_results).attr('id', 'search_results');
  search_area.appendChild(search_bar);
  search_area.appendChild(search_results);
  (document.getElementById('container')).appendChild(search_area);
  return bind_search_area();
};

bind_search_area = function() {
  poll_keypress();
  return $('#search_field').bind('keyup', function(event) {
    var date;
    date = new Date();
    window.lastpress = date.getTime();
    console.log(window.lastpress);
    return console.log('up ' + date.getTime());
  });
};

window.poll_keypress = function() {
  var date, _ref;
  date = new Date();
  console.log(window.lastpress);
  if ((500 < (_ref = date.getTime() - window.lastpress) && _ref < 1001)) {
    $.ajax({
      url: script_root + '/_get_users',
      type: 'GET',
      dataType: 'json',
      data: {
        query: '%' + $('#search_field')[0].value + '%'
      },
      success: function(data) {
        return set_searched_users(data);
      }
    });
  }
  return setTimeout("window.poll_keypress()", 500);
};

set_searched_users = function(data) {
  var child, children_to_remove, container, holder_left, holder_top, i, pile_member, pile_name, search_results, user, user_holder, _i, _j, _len, _ref, _ref1, _ref2;
  search_results = document.getElementById('search_results');
  container = document.getElementById('container');
  while (search_results.children.length > 0) {
    search_results.removeChild(search_results.children[0]);
  }
  children_to_remove = [];
  for (i = _i = _ref = container.children.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
    child = container.children[i];
    if (($(child).attr('data-search')) != null) {
      container.removeChild(child);
    }
  }
  _ref1 = data.result;
  for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
    user = _ref1[_j];
    user_holder = document.createElement('div');
    $(user_holder).attr('class', 'user_holder');
    pile_name = document.createElement('div');
    $(pile_name).attr('class', 'pile_name');
    $(pile_name).text(user.uname);
    user_holder.appendChild(pile_name);
    search_results.appendChild(user_holder);
    if (!user.in_pile) {
      pile_member = document.createElement('div');
      $(pile_member).attr('class', 'pile_member');
      $(pile_member).attr('data-id', user.id);
      $(pile_member).text(user.id);
      _ref2 = get_offsets(user_holder), holder_left = _ref2[0], holder_top = _ref2[1];
      holder_top += 4;
      holder_left += 5;
      $(pile_member).attr('style', "top:" + holder_top + "px;left:" + holder_left + "px;");
      $(pile_member).attr('data-search', true);
      container.appendChild(pile_member);
    }
  }
  return $(".pile_member[data-search='true']").draggable({
    start: function() {
      return create_delete();
    },
    drag: function() {
      return dragging(this);
    },
    stop: function(e, ui) {
      remove_delete();
      return drag_stopped(e, ui, this);
    },
    containment: "parent"
  });
};

dragging = function(obj) {
  var del_area, over, over_pile;
  over = over_selector(obj, '.delete_area');
  over_pile = over_selector(obj, '.pile_members');
  if (over) {
    if ((($(over).attr('class')).indexOf('over')) === -1) {
      $(over).addClass('over');
      $(over).stop().animate({
        'background-color': '#FFBBBB'
      });
    }
  } else if (over_pile) {
    del_area = over_pile.offsetParent.children[2];
    if ((($(del_area).attr('class')).indexOf('over')) !== -1) {
      $(del_area).removeClass('over');
      $(del_area).stop().animate({
        'background-color': '#EE9999'
      });
    }
  }
  return 0;
};

drag_stopped = function(e, ui, obj) {
  var over;
  if (over_selector(obj, '.delete_area')) {
    json_sync_piles($(obj).attr('data-id'), -1);
  } else if (over_selector(obj, '.pile')) {
    over = over_selector(obj, '.pile');
    console.log(over);
    json_sync_piles($(obj).attr('data-id'), $(over).attr('data-id'));
  }
  return 0;
};

json_sync_piles = function(object_id, over_id) {
  var left, object, object_left, object_top, over, over_left, over_top, top, _ref, _ref1;
  object = $('.pile_member[data-id=' + object_id + ']')[0];
  if (over_id !== -1) {
    over = $('.pile[data-id=' + over_id + ']')[0];
    _ref = get_offsets(over), over_left = _ref[0], over_top = _ref[1];
    _ref1 = get_offsets(object), object_left = _ref1[0], object_top = _ref1[1];
    left = (object_left - over_left) / over.offsetWidth;
    top = (object_top - over_top) / this.pile_height;
  }
  $(object).removeAttr('data-search');
  return $.ajax({
    url: script_root + '/_piles_save',
    type: 'POST',
    dataType: 'json',
    data: {
      member: object_id,
      pile_num: over_id !== -1 ? over_id : -1,
      x: over_id !== -1 ? left : -1,
      y: over_id !== -1 ? top : -1
    },
    success: function(data) {
      if (over_id === -1 && data.result === 1) {
        remove_object(object_id);
      } else if (over_id === -1) {
        status_notify(object, 'error');
      }
      return status_notify(object, 'success');
    },
    error: function() {
      return status_notify(object, 'error');
    }
  });
};

remove_object = function(object_id) {
  var object;
  console.log('exploding ' + object_id);
  object = $('.pile_member[data-id=' + object_id + ']')[0];
  console.log(object);
  $(object).hide("explode", 1000);
  return 1;
};

over_selector = function(element, selector) {
  var array_length, over_object,
    _this = this;
  array_length = $(selector).length;
  over_object = false;
  $(selector).each(function(iter, obj) {
    var element_left, element_top, offset_left, offset_top, x1, x2, y1, y2, _ref, _ref1;
    _ref = get_offsets(obj), offset_left = _ref[0], offset_top = _ref[1];
    x1 = offset_left;
    y1 = offset_top + obj.offsetHeight;
    x2 = offset_left + obj.offsetWidth;
    y2 = offset_top;
    _ref1 = get_offsets(element), element_left = _ref1[0], element_top = _ref1[1];
    if ((x1 < element_left && element_left < x2) && (y1 > element_top && element_top > y2)) {
      over_object = obj;
      return false;
    }
  });
  return over_object;
};

globals = ((function() {
  var _results;
  _results = [];
  for (name in window) {
    _results.push(name);
  }
  return _results;
})()).slice(0, 11);

test = 2 !== 3 ? 11 : 22;

bootstrap = function() {
  setup_structure();
  setup_search();
  return 0;
};

$(document).ready(function() {
  return bootstrap();
});
